		     +--------------------------+
       	       	     |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Xiaojiang Guo      <gxj@stanford.edu>
Chunyan   Wang     <chunyan@stanford.edu>
Yinfeng   Qin      <yinfeng@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We did not rely on new struct, global of static varialbes here to implement
argument passing. However, we do design separate functions for the task,
they are in process.c:

/* parse cmd_line, separate program file name and following arguments
   and push to stack exactly as illustrated in pintos document 3.5.1. */
static bool argument_passing (const char *cmd_line, void **esp);

/* push 4 bytes of data on top of stack at *p_stack, adding safety check
   to ensure the push does not overflow stack page */
static bool push_4byte (char** p_stack, void* val, void** esp);

/* separates the program file name from command line  */
static void get_prog_file_name (const char* cmd_line, char* prog_file_name);


---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We scan in reverse direction (from right to left) to find each argument 
within the input command line, and for each argument encountered, we push it 
on top of user stack beginning from PHYS_BASE - 1; after successfully pushing
all arguments and performing word-alignment, we then scan from PHYS_BASE - 1 
to find the beginning address of each argument, and push it on stack. This
way, when we want to get arguments back, we can just using pop operation to 
ensure the right order of arguments.

We add a utility function push_4byte to push pointers or integers on top of 
user stack page, and make boundary check to make sure the push does not 
overflow the stack page. For other push operations used to store argument
string, we also do similar boundary checks.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() typically uses an internal buffer to store the states (where we 
are within the string last time) and is thus not thread-safe.

strtok_r() takes a third arguments to determine the place within the string 
to go on searching tokens, and thus works in multi-thread systems like Pintos.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

In our implementation, each process maintains its own list of open files in 
an array of length 128. While the first 2 elements are intentionally left
NULL for STDIN_FILENO and STDOUT_FILENO, each subsequent array index is used
as a file descriptor corresponding to the open file stored in this array 
element. When opening a file we search in the array to find a vacancy, store
the pointer to file_info structure there, and return the index as file 
descriptor. And when closing a file we can go directly according to file 
descriptor (index in array) to find the file_info structure and close it.

This way file descritpors are unique just within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

In our implementation, each process maintains its own list of open files in 
an array of length 128. While the first 2 elements are intentionally left
NULL for STDIN_FILENO and STDOUT_FILENO, each subsequent array index is used
as a file descriptor corresponding to the open file stored in this array 
element. When opening a file we search in the array to find a vacancy, store 
the pointer to file_info structure there, and return the index as file 
descriptor. And when closing a file we can go directly according to file 
descriptor (index in array) to find the file_info structure and close it.

The main advantages of our design for file descriptors lie in the overall
speed performance. Our implemention gives O(n) time complexity for 
allocating file descriptors when opening files, while O(1) time complexity 
for all subsequent query operations in any syscall involving file descriptors.

The disadvantages of our design could be that the number of open files 
allowed for each process is limited, or that when the number of open files is
small, it wastes memory space. We have considered these short-comings and
understood we can solve them by using dynamic strctures such as list. It is 
our choice to favor speed that we choose the design with array and file 
descriptor as index in the array.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
